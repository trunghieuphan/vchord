package com.guitar.instructor.daos;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.guitar.instructor.daos.Song;
import com.guitar.instructor.daos.Artist;
import com.guitar.instructor.daos.Level;
import com.guitar.instructor.daos.Rhythm;
import com.guitar.instructor.daos.Melody;
import com.guitar.instructor.daos.ChordLib;

import com.guitar.instructor.daos.SongDao;
import com.guitar.instructor.daos.ArtistDao;
import com.guitar.instructor.daos.LevelDao;
import com.guitar.instructor.daos.RhythmDao;
import com.guitar.instructor.daos.MelodyDao;
import com.guitar.instructor.daos.ChordLibDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig songDaoConfig;
    private final DaoConfig artistDaoConfig;
    private final DaoConfig levelDaoConfig;
    private final DaoConfig rhythmDaoConfig;
    private final DaoConfig melodyDaoConfig;
    private final DaoConfig chordLibDaoConfig;

    private final SongDao songDao;
    private final ArtistDao artistDao;
    private final LevelDao levelDao;
    private final RhythmDao rhythmDao;
    private final MelodyDao melodyDao;
    private final ChordLibDao chordLibDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        songDaoConfig = daoConfigMap.get(SongDao.class).clone();
        songDaoConfig.initIdentityScope(type);

        artistDaoConfig = daoConfigMap.get(ArtistDao.class).clone();
        artistDaoConfig.initIdentityScope(type);

        levelDaoConfig = daoConfigMap.get(LevelDao.class).clone();
        levelDaoConfig.initIdentityScope(type);

        rhythmDaoConfig = daoConfigMap.get(RhythmDao.class).clone();
        rhythmDaoConfig.initIdentityScope(type);

        melodyDaoConfig = daoConfigMap.get(MelodyDao.class).clone();
        melodyDaoConfig.initIdentityScope(type);

        chordLibDaoConfig = daoConfigMap.get(ChordLibDao.class).clone();
        chordLibDaoConfig.initIdentityScope(type);

        songDao = new SongDao(songDaoConfig, this);
        artistDao = new ArtistDao(artistDaoConfig, this);
        levelDao = new LevelDao(levelDaoConfig, this);
        rhythmDao = new RhythmDao(rhythmDaoConfig, this);
        melodyDao = new MelodyDao(melodyDaoConfig, this);
        chordLibDao = new ChordLibDao(chordLibDaoConfig, this);

        registerDao(Song.class, songDao);
        registerDao(Artist.class, artistDao);
        registerDao(Level.class, levelDao);
        registerDao(Rhythm.class, rhythmDao);
        registerDao(Melody.class, melodyDao);
        registerDao(ChordLib.class, chordLibDao);
    }
    
    public void clear() {
        songDaoConfig.getIdentityScope().clear();
        artistDaoConfig.getIdentityScope().clear();
        levelDaoConfig.getIdentityScope().clear();
        rhythmDaoConfig.getIdentityScope().clear();
        melodyDaoConfig.getIdentityScope().clear();
        chordLibDaoConfig.getIdentityScope().clear();
    }

    public SongDao getSongDao() {
        return songDao;
    }

    public ArtistDao getArtistDao() {
        return artistDao;
    }

    public LevelDao getLevelDao() {
        return levelDao;
    }

    public RhythmDao getRhythmDao() {
        return rhythmDao;
    }

    public MelodyDao getMelodyDao() {
        return melodyDao;
    }

    public ChordLibDao getChordLibDao() {
        return chordLibDao;
    }

}
