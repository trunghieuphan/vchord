package com.guitar.instructor.daos;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.guitar.instructor.daos.Song;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SONG.
*/
public class SongDao extends AbstractDao<Song, String> {

    public static final String TABLENAME = "SONG";

    /**
     * Properties of entity Song.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Lyric = new Property(2, String.class, "lyric", false, "LYRIC");
        public final static Property Rhythm_id = new Property(3, Integer.class, "rhythm_id", false, "RHYTHM_ID");
        public final static Property Composer_id = new Property(4, String.class, "composer_id", false, "COMPOSER_ID");
        public final static Property Singer_id = new Property(5, String.class, "singer_id", false, "SINGER_ID");
        public final static Property Level_id = new Property(6, Integer.class, "level_id", false, "LEVEL_ID");
        public final static Property Melody_id = new Property(7, Integer.class, "melody_id", false, "MELODY_ID");
        public final static Property Update_date = new Property(8, String.class, "update_date", false, "UPDATE_DATE");
        public final static Property Music_link = new Property(9, String.class, "music_link", false, "MUSIC_LINK");
        public final static Property Favorite = new Property(10, Integer.class, "favorite", false, "FAVORITE");
        public final static Property Setting = new Property(11, String.class, "setting", false, "SETTING");
        public final static Property Unsigned_title = new Property(12, String.class, "unsigned_title", false, "UNSIGNED_TITLE");
    };

    private DaoSession daoSession;


    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SONG' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'LYRIC' TEXT," + // 2: lyric
                "'RHYTHM_ID' INTEGER," + // 3: rhythm_id
                "'COMPOSER_ID' TEXT," + // 4: composer_id
                "'SINGER_ID' TEXT," + // 5: singer_id
                "'LEVEL_ID' INTEGER," + // 6: level_id
                "'MELODY_ID' INTEGER," + // 7: melody_id
                "'UPDATE_DATE' TEXT," + // 8: update_date
                "'MUSIC_LINK' TEXT," + // 9: music_link
                "'FAVORITE' INTEGER," + // 10: favorite
                "'SETTING' TEXT," + // 11: setting
                "'UNSIGNED_TITLE' TEXT);"); // 12: unsigned_title
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SONG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String lyric = entity.getLyric();
        if (lyric != null) {
            stmt.bindString(3, lyric);
        }
 
        Integer rhythm_id = entity.getRhythm_id();
        if (rhythm_id != null) {
            stmt.bindLong(4, rhythm_id);
        }
 
        String composer_id = entity.getComposer_id();
        if (composer_id != null) {
            stmt.bindString(5, composer_id);
        }
 
        String singer_id = entity.getSinger_id();
        if (singer_id != null) {
            stmt.bindString(6, singer_id);
        }
 
        Integer level_id = entity.getLevel_id();
        if (level_id != null) {
            stmt.bindLong(7, level_id);
        }
 
        Integer melody_id = entity.getMelody_id();
        if (melody_id != null) {
            stmt.bindLong(8, melody_id);
        }
 
        String update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindString(9, update_date);
        }
 
        String music_link = entity.getMusic_link();
        if (music_link != null) {
            stmt.bindString(10, music_link);
        }
 
        Integer favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(11, favorite);
        }
 
        String setting = entity.getSetting();
        if (setting != null) {
            stmt.bindString(12, setting);
        }
 
        String unsigned_title = entity.getUnsigned_title();
        if (unsigned_title != null) {
            stmt.bindString(13, unsigned_title);
        }
    }

    @Override
    protected void attachEntity(Song entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lyric
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // rhythm_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // composer_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // singer_id
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // level_id
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // melody_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // update_date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // music_link
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // favorite
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // setting
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // unsigned_title
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLyric(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRhythm_id(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setComposer_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSinger_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLevel_id(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMelody_id(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUpdate_date(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMusic_link(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFavorite(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSetting(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUnsigned_title(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Song entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Song entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getArtistDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getArtistDao().getAllColumns());
            builder.append(" FROM SONG T");
            builder.append(" LEFT JOIN ARTIST T0 ON T.'COMPOSER_ID'=T0.'ID'");
            builder.append(" LEFT JOIN ARTIST T1 ON T.'SINGER_ID'=T1.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Song loadCurrentDeep(Cursor cursor, boolean lock) {
        Song entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Artist songcomposer = loadCurrentOther(daoSession.getArtistDao(), cursor, offset);
        entity.setSongcomposer(songcomposer);
        offset += daoSession.getArtistDao().getAllColumns().length;

        Artist songsinger = loadCurrentOther(daoSession.getArtistDao(), cursor, offset);
        entity.setSongsinger(songsinger);

        return entity;    
    }

    public Song loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Song> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Song> list = new ArrayList<Song>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Song> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Song> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
