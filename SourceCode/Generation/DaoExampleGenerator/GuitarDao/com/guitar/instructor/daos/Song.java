package com.guitar.instructor.daos;

import com.guitar.instructor.daos.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SONG.
 */
public class Song {

    private String id;
    private String title;
    private String lyric;
    private Integer rhythm_id;
    private String composer_id;
    private String singer_id;
    private Integer level_id;
    private Integer melody_id;
    private String update_date;
    private String music_link;
    private Integer favorite;
    private String setting;
    private String unsigned_title;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SongDao myDao;

    private Artist songcomposer;
    private String songcomposer__resolvedKey;

    private Artist songsinger;
    private String songsinger__resolvedKey;


    public Song() {
    }

    public Song(String id) {
        this.id = id;
    }

    public Song(String id, String title, String lyric, Integer rhythm_id, String composer_id, String singer_id, Integer level_id, Integer melody_id, String update_date, String music_link, Integer favorite, String setting, String unsigned_title) {
        this.id = id;
        this.title = title;
        this.lyric = lyric;
        this.rhythm_id = rhythm_id;
        this.composer_id = composer_id;
        this.singer_id = singer_id;
        this.level_id = level_id;
        this.melody_id = melody_id;
        this.update_date = update_date;
        this.music_link = music_link;
        this.favorite = favorite;
        this.setting = setting;
        this.unsigned_title = unsigned_title;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSongDao() : null;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getLyric() {
        return lyric;
    }

    public void setLyric(String lyric) {
        this.lyric = lyric;
    }

    public Integer getRhythm_id() {
        return rhythm_id;
    }

    public void setRhythm_id(Integer rhythm_id) {
        this.rhythm_id = rhythm_id;
    }

    public String getComposer_id() {
        return composer_id;
    }

    public void setComposer_id(String composer_id) {
        this.composer_id = composer_id;
    }

    public String getSinger_id() {
        return singer_id;
    }

    public void setSinger_id(String singer_id) {
        this.singer_id = singer_id;
    }

    public Integer getLevel_id() {
        return level_id;
    }

    public void setLevel_id(Integer level_id) {
        this.level_id = level_id;
    }

    public Integer getMelody_id() {
        return melody_id;
    }

    public void setMelody_id(Integer melody_id) {
        this.melody_id = melody_id;
    }

    public String getUpdate_date() {
        return update_date;
    }

    public void setUpdate_date(String update_date) {
        this.update_date = update_date;
    }

    public String getMusic_link() {
        return music_link;
    }

    public void setMusic_link(String music_link) {
        this.music_link = music_link;
    }

    public Integer getFavorite() {
        return favorite;
    }

    public void setFavorite(Integer favorite) {
        this.favorite = favorite;
    }

    public String getSetting() {
        return setting;
    }

    public void setSetting(String setting) {
        this.setting = setting;
    }

    public String getUnsigned_title() {
        return unsigned_title;
    }

    public void setUnsigned_title(String unsigned_title) {
        this.unsigned_title = unsigned_title;
    }

    /** To-one relationship, resolved on first access. */
    public Artist getSongcomposer() {
        String __key = this.composer_id;
        if (songcomposer__resolvedKey == null || songcomposer__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArtistDao targetDao = daoSession.getArtistDao();
            Artist songcomposerNew = targetDao.load(__key);
            synchronized (this) {
                songcomposer = songcomposerNew;
            	songcomposer__resolvedKey = __key;
            }
        }
        return songcomposer;
    }

    public void setSongcomposer(Artist songcomposer) {
        synchronized (this) {
            this.songcomposer = songcomposer;
            composer_id = songcomposer == null ? null : songcomposer.getId();
            songcomposer__resolvedKey = composer_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Artist getSongsinger() {
        String __key = this.singer_id;
        if (songsinger__resolvedKey == null || songsinger__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArtistDao targetDao = daoSession.getArtistDao();
            Artist songsingerNew = targetDao.load(__key);
            synchronized (this) {
                songsinger = songsingerNew;
            	songsinger__resolvedKey = __key;
            }
        }
        return songsinger;
    }

    public void setSongsinger(Artist songsinger) {
        synchronized (this) {
            this.songsinger = songsinger;
            singer_id = songsinger == null ? null : songsinger.getId();
            songsinger__resolvedKey = singer_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
