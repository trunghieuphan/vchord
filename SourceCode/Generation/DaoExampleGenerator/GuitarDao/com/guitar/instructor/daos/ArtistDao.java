package com.guitar.instructor.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.guitar.instructor.daos.Artist;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTIST.
*/
public class ArtistDao extends AbstractDao<Artist, String> {

    public static final String TABLENAME = "ARTIST";

    /**
     * Properties of entity Artist.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Unsigned_name = new Property(2, String.class, "unsigned_name", false, "UNSIGNED_NAME");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Is_composer = new Property(4, Boolean.class, "is_composer", false, "IS_COMPOSER");
        public final static Property Is_guru = new Property(5, Boolean.class, "is_guru", false, "IS_GURU");
        public final static Property Is_singer = new Property(6, Boolean.class, "is_singer", false, "IS_SINGER");
        public final static Property Update_date = new Property(7, String.class, "update_date", false, "UPDATE_DATE");
    };


    public ArtistDao(DaoConfig config) {
        super(config);
    }
    
    public ArtistDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTIST' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'UNSIGNED_NAME' TEXT," + // 2: unsigned_name
                "'DESCRIPTION' TEXT," + // 3: description
                "'IS_COMPOSER' INTEGER," + // 4: is_composer
                "'IS_GURU' INTEGER," + // 5: is_guru
                "'IS_SINGER' INTEGER," + // 6: is_singer
                "'UPDATE_DATE' TEXT);"); // 7: update_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Artist entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String unsigned_name = entity.getUnsigned_name();
        if (unsigned_name != null) {
            stmt.bindString(3, unsigned_name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Boolean is_composer = entity.getIs_composer();
        if (is_composer != null) {
            stmt.bindLong(5, is_composer ? 1l: 0l);
        }
 
        Boolean is_guru = entity.getIs_guru();
        if (is_guru != null) {
            stmt.bindLong(6, is_guru ? 1l: 0l);
        }
 
        Boolean is_singer = entity.getIs_singer();
        if (is_singer != null) {
            stmt.bindLong(7, is_singer ? 1l: 0l);
        }
 
        String update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindString(8, update_date);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Artist readEntity(Cursor cursor, int offset) {
        Artist entity = new Artist( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // unsigned_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // is_composer
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // is_guru
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // is_singer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // update_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Artist entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUnsigned_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_composer(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setIs_guru(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIs_singer(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setUpdate_date(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Artist entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Artist entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
