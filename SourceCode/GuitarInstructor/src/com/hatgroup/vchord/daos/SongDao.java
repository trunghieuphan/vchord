package com.hatgroup.vchord.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hatgroup.vchord.entities.Song;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SONG.
*/
public class SongDao extends AbstractDao<Song, Long> {

    public static final String TABLENAME = "SONG";

    /**
     * Properties of entity Song.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Lyric = new Property(2, String.class, "lyric", false, "LYRIC");
        public final static Property Rhythm_id = new Property(3, Integer.class, "rhythm_id", false, "RHYTHM_ID");
        public final static Property Level_id = new Property(4, Integer.class, "level_id", false, "LEVEL_ID");
        public final static Property Melody_id = new Property(5, Integer.class, "melody_id", false, "MELODY_ID");
        public final static Property Update_date = new Property(6, String.class, "update_date", false, "UPDATE_DATE");
        public final static Property Music_link = new Property(7, String.class, "music_link", false, "MUSIC_LINK");
        public final static Property Favorite = new Property(8, Integer.class, "favorite", false, "FAVORITE");
        public final static Property Setting = new Property(9, String.class, "setting", false, "SETTING");
        public final static Property Unsigned_title = new Property(10, String.class, "unsigned_title", false, "UNSIGNED_TITLE");
        public final static Property Singer_name = new Property(11, String.class, "singer_name", false, "SINGER_NAME");
        public final static Property Unsigned_singer_name = new Property(12, String.class, "unsigned_singer_name", false, "UNSIGNED_SINGER_NAME");
        public final static Property Composer_name = new Property(13, String.class, "composer_name", false, "COMPOSER_NAME");
        public final static Property Unsigned_composer_name = new Property(14, String.class, "unsigned_composer_name", false, "UNSIGNED_COMPOSER_NAME");
        public final static Property Tone = new Property(15, String.class, "tone", false, "TONE");
    };


    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SONG' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'LYRIC' TEXT," + // 2: lyric
                "'RHYTHM_ID' INTEGER," + // 3: rhythm_id
                "'LEVEL_ID' INTEGER," + // 4: level_id
                "'MELODY_ID' INTEGER," + // 5: melody_id
                "'UPDATE_DATE' TEXT," + // 6: update_date
                "'MUSIC_LINK' TEXT," + // 7: music_link
                "'FAVORITE' INTEGER," + // 8: favorite
                "'SETTING' TEXT," + // 9: setting
                "'UNSIGNED_TITLE' TEXT," + // 10: unsigned_title
                "'SINGER_NAME' TEXT," + // 11: singer_name
                "'UNSIGNED_SINGER_NAME' TEXT," + // 12: unsigned_singer_name
                "'COMPOSER_NAME' TEXT," + // 13: composer_name
                "'UNSIGNED_COMPOSER_NAME' TEXT," + // 14: unsigned_composer_name
                "'TONE' TEXT);"); // 15: tone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SONG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long id = entity.getId().longValue();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String lyric = entity.getLyric();
        if (lyric != null) {
            stmt.bindString(3, lyric);
        }
 
        Integer rhythm_id = entity.getRhythm_id();
        if (rhythm_id != null) {
            stmt.bindLong(4, rhythm_id);
        }
 
        Integer level_id = entity.getLevel_id();
        if (level_id != null) {
            stmt.bindLong(5, level_id);
        }
 
        Integer melody_id = entity.getMelody_id();
        if (melody_id != null) {
            stmt.bindLong(6, melody_id);
        }
 
        String update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindString(7, update_date);
        }
 
        String music_link = entity.getMusic_link();
        if (music_link != null) {
            stmt.bindString(8, music_link);
        }
 
        Integer favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(9, favorite);
        }
 
        String setting = entity.getSetting();
        if (setting != null) {
            stmt.bindString(10, setting);
        }
 
        String unsigned_title = entity.getUnsigned_title();
        if (unsigned_title != null) {
            stmt.bindString(11, unsigned_title);
        }
 
        String singer_name = entity.getSinger_name();
        if (singer_name != null) {
            stmt.bindString(12, singer_name);
        }
 
        String unsigned_singer_name = entity.getUnsigned_singer_name();
        if (unsigned_singer_name != null) {
            stmt.bindString(13, unsigned_singer_name);
        }
 
        String composer_name = entity.getComposer_name();
        if (composer_name != null) {
            stmt.bindString(14, composer_name);
        }
 
        String unsigned_composer_name = entity.getUnsigned_composer_name();
        if (unsigned_composer_name != null) {
            stmt.bindString(15, unsigned_composer_name);
        }
 
        String tone = entity.getTone();
        if (tone != null) {
            stmt.bindString(16, tone);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lyric
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // rhythm_id
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // level_id
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // melody_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // update_date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // music_link
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // favorite
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // setting
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // unsigned_title
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // singer_name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // unsigned_singer_name
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // composer_name
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // unsigned_composer_name
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // tone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLyric(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRhythm_id(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setLevel_id(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMelody_id(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUpdate_date(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMusic_link(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFavorite(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSetting(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUnsigned_title(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSinger_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUnsigned_singer_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setComposer_name(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUnsigned_composer_name(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTone(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Song entity, long rowId) {
        return entity.getId().longValue();
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Song entity) {
        if(entity != null) {
            return entity.getId().longValue();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
